"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3451],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>u});var a=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var d=a.createContext({}),l=function(e){var n=a.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},c=function(e){var n=l(e.components);return a.createElement(d.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},k=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,d=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),k=l(t),u=o,m=k["".concat(d,".").concat(u)]||k[u]||p[u]||r;return t?a.createElement(m,s(s({ref:n},c),{},{components:t})):a.createElement(m,s({ref:n},c))}));function u(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,s=new Array(r);s[0]=k;var i={};for(var d in n)hasOwnProperty.call(n,d)&&(i[d]=n[d]);i.originalType=e,i.mdxType="string"==typeof e?e:o,s[1]=i;for(var l=2;l<r;l++)s[l]=t[l];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}k.displayName="MDXCreateElement"},7652:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>p,frontMatter:()=>r,metadata:()=>i,toc:()=>l});var a=t(7462),o=(t(7294),t(3905));const r={sidebar_position:3,sidebar_label:"Disk Storage Node"},s="Disk Storage Node",i={unversionedId:"nodes_and_disks/disk_nodes",id:"nodes_and_disks/disk_nodes",title:"Disk Storage Node",description:"Raw disk storage nodes provide applications with raw disk data volumes and",source:"@site/docs/nodes_and_disks/disk_nodes.md",sourceDirName:"nodes_and_disks",slug:"/nodes_and_disks/disk_nodes",permalink:"/docs/nodes_and_disks/disk_nodes",draft:!1,editUrl:"https://github.com/hwameistor/hwameistor/edit/main/docs/docs/nodes_and_disks/disk_nodes.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,sidebar_label:"Disk Storage Node"},sidebar:"tutorialSidebar",previous:{title:"LVM Storage Node",permalink:"/docs/nodes_and_disks/lvm_nodes"},next:{title:"Disk Expansion",permalink:"/docs/nodes_and_disks/disk_expansion"}},d={},l=[{value:"Steps",id:"steps",level:2},{value:"1. Prepare a disk storage node",id:"1-prepare-a-disk-storage-node",level:3},{value:"2. Add the storage node into HwameiStor",id:"2-add-the-storage-node-into-hwameistor",level:3},{value:"3. Post check",id:"3-post-check",level:3}],c={toc:l};function p(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"disk-storage-node"},"Disk Storage Node"),(0,o.kt)("p",null,"Raw disk storage nodes provide applications with raw disk data volumes and\nmaintain the mapping between raw disks and raw disk data volumes on the storage node."),(0,o.kt)("h2",{id:"steps"},"Steps"),(0,o.kt)("h3",{id:"1-prepare-a-disk-storage-node"},"1. Prepare a disk storage node"),(0,o.kt)("p",null,"Add the node to the Kubernetes cluster or select a Kubernetes node."),(0,o.kt)("p",null,"For example, suppose you have a new node with the following information:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"name: k8s-worker-2"),(0,o.kt)("li",{parentName:"ul"},"devPath: /dev/sdb"),(0,o.kt)("li",{parentName:"ul"},"diskType: SSD disk")),(0,o.kt)("p",null,"After the new node is already added into the Kubernetes cluster,\nmake sure the following HwameiStor pods are already running on this node."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$ kubectl get node\nNAME           STATUS   ROLES            AGE     VERSION\nk8s-master-1   Ready    master           96d     v1.24.3-2+63243a96d1c393\nk8s-worker-1   Ready    worker           96h     v1.24.3-2+63243a96d1c393\nk8s-worker-2   Ready    worker           96h     v1.24.3-2+63243a96d1c393\n\n$ kubectl -n hwameistor get pod -o wide | grep k8s-worker-2\nhwameistor-local-disk-manager-sfsf1     2/2     Running   0     19h   10.6.128.150      k8s-worker-2   <none>  <none>\n\n# check LocalDiskNode resource\n$ kubectl get localdisknode k8s-worker-2\nNAME           FREECAPACITY   TOTALCAPACITY   TOTALDISK   STATUS   AGE\nk8s-worker-2                                              Ready    21d\n")),(0,o.kt)("h3",{id:"2-add-the-storage-node-into-hwameistor"},"2. Add the storage node into HwameiStor"),(0,o.kt)("p",null,"First, change the ",(0,o.kt)("inlineCode",{parentName:"p"},"owner")," information of the disk sdb to local-disk-manager as below:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},"$ kubectl edit ld localdisk-2307de2b1c5b5d051058bc1d54b41d5c\napiVersion: hwameistor.io/v1alpha1\nkind: LocalDisk\nmetadata:\n  name: localdisk-2307de2b1c5b5d051058bc1d54b41d5c\nspec:\n  devicePath: /dev/sdb\n  nodeName: k8s-worker-2\n+ owner: local-disk-manager\n...\n")),(0,o.kt)("p",null,"Create the storage pool of the node by adding a LocalStorageClaim CR as below:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},"$ kubectl apply -f - <<EOF\napiVersion: hwameistor.io/v1alpha1\nkind: LocalDiskClaim\nmetadata:\n  name: k8s-worker-2\nspec:\n  nodeName: k8s-worker-2\n  owner: local-disk-manager\n  description:\n    diskType: SSD\nEOF\n")),(0,o.kt)("h3",{id:"3-post-check"},"3. Post check"),(0,o.kt)("p",null,"Finally, check if the node has created the storage pool by checking the LocalDiskNode CR."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl get localstoragenode k8s-worker-2 -o yaml\n")),(0,o.kt)("p",null,"The output may look like:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: hwameistor.io/v1alpha1\nkind: LocalDiskNode\nmetadata:\n  name: k8s-worker-2\nspec:\n  nodeName: k8s-worker-2\nstatus:\n  pools:\n    LocalDisk_PoolSSD:\n      class: SSD\n      disks:\n        - capacityBytes: 214744170496\n          devPath: /dev/sdb\n          state: Available\n          type: SSD\n      freeCapacityBytes: 214744170496\n      freeVolumeCount: 1\n      totalCapacityBytes: 214744170496\n      totalVolumeCount: 1\n      type: REGULAR\n      usedCapacityBytes: 0\n      usedVolumeCount: 0\n      volumeCapacityBytesLimit: 214744170496\n      volumes:\n  state: Ready\n")))}p.isMDXComponent=!0}}]);