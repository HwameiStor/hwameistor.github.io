"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1372],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>p});var a=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var i=a.createContext({}),d=function(e){var n=a.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},c=function(e){var n=d(e.components);return a.createElement(i.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,i=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=d(t),p=o,g=u["".concat(i,".").concat(p)]||u[p]||m[p]||r;return t?a.createElement(g,l(l({ref:n},c),{},{components:t})):a.createElement(g,l({ref:n},c))}));function p(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,l=new Array(r);l[0]=u;var s={};for(var i in n)hasOwnProperty.call(n,i)&&(s[i]=n[i]);s.originalType=e,s.mdxType="string"==typeof e?e:o,l[1]=s;for(var d=2;d<r;d++)l[d]=t[d];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},2991:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>l,default:()=>m,frontMatter:()=>r,metadata:()=>s,toc:()=>d});var a=t(7462),o=(t(7294),t(3905));const r={sidebar_position:8,sidebar_label:"Local Cache Volumes"},l="Local Cache Volumes",s={unversionedId:"volumes/cache",id:"volumes/cache",title:"Local Cache Volumes",description:"Running AI training applications with HwameiStor is simple.",source:"@site/docs/volumes/cache.md",sourceDirName:"volumes",slug:"/volumes/cache",permalink:"/docs/volumes/cache",draft:!1,editUrl:"https://github.com/hwameistor/hwameistor/edit/main/docs/docs/volumes/cache.md",tags:[],version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8,sidebar_label:"Local Cache Volumes"},sidebar:"tutorialSidebar",previous:{title:"Eviction",permalink:"/docs/volumes/volume_eviction"},next:{title:"Encrypt Volume",permalink:"/docs/volumes/volume_encrypt"}},i={},d=[{value:"Install Dragonfly",id:"install-dragonfly",level:2},{value:"Verify dragonfly",id:"verify-dragonfly",level:2},{value:"Verify <code>DataSet</code>",id:"verify-dataset",level:2},{value:"Create <code>DataSet</code>",id:"create-dataset",level:2},{value:"Create a <code>PVC</code> and bind it to dataset PV",id:"create-a-pvc-and-bind-it-to-dataset-pv",level:2},{value:"Create <code>StatefulSet</code>",id:"create-statefulset",level:2},{value:"Verify Nginx Pod",id:"verify-nginx-pod",level:2},{value:"Optional Scale Nginx out into a 3-node Cluster",id:"optional-scale-nginx-out-into-a-3-node-cluster",level:2}],c={toc:d};function m(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"local-cache-volumes"},"Local Cache Volumes"),(0,o.kt)("p",null,"Running AI training applications with HwameiStor is simple."),(0,o.kt)("p",null,"As an example, we will demonstrate deploying an Nginx application by creating a local cache volume."),(0,o.kt)("p",null,"Before proceeding, ensure that Dragonfly is installed in your cluster and all necessary configurations are completed."),(0,o.kt)("h2",{id:"install-dragonfly"},"Install Dragonfly"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Configure /etc/hosts according to the cluster."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-console"},"$ vi /etc/hosts\nhost1-IP hostName1\nhost2-IP hostName2\nhost3-IP hostName3\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"To install Dragonfly components, ensure a default storage class is configured, as it is required to create storage volumes."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'kubectl patch storageclass hwameistor-storage-lvm-hdd -p \'{"metadata": {"annotations":{"storageclass.kubernetes.io/is-default-class":"true"}}}\'\n'))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Install dragonfly using helm."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"helm repo add dragonfly https://dragonflyoss.github.io/helm-charts/\nhelm install --create-namespace --namespace dragonfly-system dragonfly dragonfly/dragonfly --version 1.1.63\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Configure dragonfly-dfdaemon."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl -n dragonfly-system get ds\nkubectl -n dragonfly-system edit ds dragonfly-dfdaemon\n")),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"...\nspec:\n      spec:\n        containers:\n        - image: docker.io/dragonflyoss/dfdaemon:v2.1.45\n       ...\n          securityContext:\n            capabilities:\n              add:\n              - SYS_ADMIN\n            privileged: true\n          volumeMounts:\n          ...\n\n          - mountPath: /var/run\n            name: host-run\n          - mountPath: /mnt\n            mountPropagation: Bidirectional\n            name: host-mnt\n          ...\n      volumes:\n      ...\n      - hostPath:\n          path: /var/run\n          type: DirectoryOrCreate\n        name: host-run\n      - hostPath:\n          path: /mnt\n          type: DirectoryOrCreate\n        name: host-mnt\n      ...\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Install the dfget client command line tool.\nEach node executes:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"wget https://github.com/dragonflyoss/Dragonfly2/releases/download/v2.1.44/dfget-2.1.44-linux-amd64.rpm\nrpm -ivh dfget-2.1.44-linux-amd64.rpm\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"To avoid issues, cancel the previously configured default storage class."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'kubectl patch storageclass hwameistor-storage-lvm-hdd -p \'{"metadata": {"annotations":{"storageclass.kubernetes.io/is-default-class":"false"}}}\'\n')))),(0,o.kt)("h2",{id:"verify-dragonfly"},"Verify dragonfly"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},"$  kubectl -n dragonfly-system get pod -owide\nNAME                                 READY   STATUS    RESTARTS      AGE   IP                NODE                NOMINATED NODE   READINESS GATES\ndragonfly-dfdaemon-d2fzp             1/1     Running   0             19h   200.200.169.158   hwameistor-test-1   <none>           <none>\ndragonfly-dfdaemon-p7smf             1/1     Running   0             19h   200.200.29.171    hwameistor-test-3   <none>           <none>\ndragonfly-dfdaemon-tcwkr             1/1     Running   0             19h   200.200.39.71     hwameistor-test-2   <none>           <none>\ndragonfly-manager-5479bf9bc9-tp4g5   1/1     Running   1 (19h ago)   19h   200.200.29.174    hwameistor-test-3   <none>           <none>\ndragonfly-manager-5479bf9bc9-wpbr6   1/1     Running   0             19h   200.200.39.92     hwameistor-test-2   <none>           <none>\ndragonfly-manager-5479bf9bc9-zvrdj   1/1     Running   0             19h   200.200.169.142   hwameistor-test-1   <none>           <none>\ndragonfly-mysql-0                    1/1     Running   0             19h   200.200.29.178    hwameistor-test-3   <none>           <none>\ndragonfly-redis-master-0             1/1     Running   0             19h   200.200.169.137   hwameistor-test-1   <none>           <none>\ndragonfly-redis-replicas-0           1/1     Running   0             19h   200.200.39.72     hwameistor-test-2   <none>           <none>\ndragonfly-redis-replicas-1           1/1     Running   0             19h   200.200.29.130    hwameistor-test-3   <none>           <none>\ndragonfly-redis-replicas-2           1/1     Running   0             19h   200.200.169.134   hwameistor-test-1   <none>           <none>\ndragonfly-scheduler-0                1/1     Running   0             19h   200.200.169.190   hwameistor-test-1   <none>           <none>\ndragonfly-scheduler-1                1/1     Running   0             19h   200.200.39.76     hwameistor-test-2   <none>           <none>\ndragonfly-scheduler-2                1/1     Running   0             19h   200.200.29.163    hwameistor-test-3   <none>           <none>\ndragonfly-seed-peer-0                1/1     Running   1 (19h ago)   19h   200.200.169.138   hwameistor-test-1   <none>           <none>\ndragonfly-seed-peer-1                1/1     Running   0             19h   200.200.39.80     hwameistor-test-2   <none>           <none>\ndragonfly-seed-peer-2                1/1     Running   0             19h   200.200.29.151    hwameistor-test-3   <none>           <none>\n")),(0,o.kt)("h2",{id:"verify-dataset"},"Verify ",(0,o.kt)("inlineCode",{parentName:"h2"},"DataSet")),(0,o.kt)("p",null,"Take minio as an example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: datastore.io/v1alpha1\nkind: DataSet\nmetadata:\n  name: dataset-test\nspec:\n  refresh: true\n  type: minio\n  minio:\n    endpoint: Your service ip address:9000\n    bucket: BucketName/Dir # Defined according to the directory level where your dataset is located\n    secretKey: minioadmin\n    accessKey: minioadmin\n    region: ap-southeast-2\n")),(0,o.kt)("h2",{id:"create-dataset"},"Create ",(0,o.kt)("inlineCode",{parentName:"h2"},"DataSet")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl apply -f dataset.yaml\n")),(0,o.kt)("p",null,"Confirm that the cache volume has been created successfully"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-Console"},"$ k get dataset\nNAME           TYPE    LASTREFRESHTIME   CONNECTED   AGE     ERROR\ndataset-test   minio                                 4m38s\n\n$ k get lv\nNAME                                       POOL                   REPLICAS   CAPACITY     USED        STATE   PUBLISHED           AGE\ndataset-test                               LocalStorage_PoolHDD              211812352                Ready                       4m27s\n\n$ k get pv\nNAME                                       CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS      CLAIM                                                    STORAGECLASS                 REASON   AGE\ndataset-test                               202Mi      ROX            Retain           Available                                                                                                  35s\n")),(0,o.kt)("p",null,"The size of PV is determined by the size of your data set."),(0,o.kt)("h2",{id:"create-a-pvc-and-bind-it-to-dataset-pv"},"Create a ",(0,o.kt)("inlineCode",{parentName:"h2"},"PVC")," and bind it to dataset PV"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: hwameistor-dataset\n  namespace: default\nspec:\n  accessModes:\n    - ReadOnlyMany\n  resources:\n    requests:\n      storage: 202Mi # dataset size\n  volumeMode: Filesystem\n  volumeName: dataset-test # dataset name\n")),(0,o.kt)("p",null,"Confirm that the pvc has been created successfully."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-Console"},"$ k get pvc\nNAME                 STATUS   VOLUME         CAPACITY   ACCESS MODES   STORAGECLASS   AGE\nhwameistor-dataset   Bound    dataset-test   202Mi      ROX                           4s\n")),(0,o.kt)("h2",{id:"create-statefulset"},"Create ",(0,o.kt)("inlineCode",{parentName:"h2"},"StatefulSet")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl apply -f sts-nginx-AI.yaml\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  name: nginx-dataload\n  namespace: default\nspec:\n  serviceName: nginx-dataload\n  replicas: 1\n  selector:\n    matchLabels:\n      app: nginx-dataload\n  template:\n    metadata:\n      labels:\n        app: nginx-dataload\n    spec:\n      hostNetwork: true\n      hostPID: true\n      hostIPC: true\n      containers:\n        - name: nginx\n          image: docker.io/library/nginx:latest\n          imagePullPolicy: IfNotPresent\n          securityContext:\n            privileged: true\n          env:\n            - name: DATASET_NAME\n              value: dataset-test\n          volumeMounts:\n            - name: data\n              mountPath: /data\n          ports:\n            - containerPort: 80\n      volumes:\n        - name: data\n          persistentVolumeClaim:\n            claimName: hwameistor-dataset\n")),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("inlineCode",{parentName:"p"},"claimName")," uses the name of the pvc bound to the dataset. env: DATASET_NAME=datasetName")),(0,o.kt)("h2",{id:"verify-nginx-pod"},"Verify Nginx Pod"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-Console"},"$ kubectl get pod\nNAME               READY   STATUS            RESTARTS   AGE\nnginx-dataload-0   1/1     Running           0          3m58s\n\n$ kubectl  logs nginx-dataload-0 hwameistor-dataloader\nCreated custom resource\nCustom resource deleted, exiting\nDataLoad execution time: 1m20.24310857s\n")),(0,o.kt)("p",null,"According to the log, loading data took 1m20.24310857s."),(0,o.kt)("h2",{id:"optional-scale-nginx-out-into-a-3-node-cluster"},"[Optional]"," Scale Nginx out into a 3-node Cluster"),(0,o.kt)("p",null,"HwameiStor cache volumes support horizontal expansion of ",(0,o.kt)("inlineCode",{parentName:"p"},"StatefulSet"),". Each ",(0,o.kt)("inlineCode",{parentName:"p"},"pod")," of ",(0,o.kt)("inlineCode",{parentName:"p"},"StatefulSet")," will attach and mount a HwameiStor cache volume bound to the same dataset."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},"$ kubectl scale sts/sts-nginx-AI --replicas=3\n$ kubectl get pod -o wide\n\nNAME               READY   STATUS    RESTARTS   AGE\nnginx-dataload-0   1/1     Running   0          41m\nnginx-dataload-1   1/1     Running   0          37m\nnginx-dataload-2   1/1     Running   0          35m\n\n$ kubectl logs nginx-dataload-1 hwameistor-dataloader\nCreated custom resource\nCustom resource deleted, exiting\nDataLoad execution time: 3.24310857s\n\n$ kubectl logs nginx-dataload-2 hwameistor-dataloader\nCreated custom resource\nCustom resource deleted, exiting\nDataLoad execution time: 2.598923144s\n")),(0,o.kt)("p",null,"According to the log, the second and third loading of data only took 3.24310857s and 2.598923144s respectively. Compared with the first loading, the speed has been greatly improved."))}m.isMDXComponent=!0}}]);