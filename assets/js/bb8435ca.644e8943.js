"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9477],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>k});var o=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var d=o.createContext({}),l=function(e){var n=o.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},p=function(e){var n=l(e.components);return o.createElement(d.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},u=o.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,d=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=l(t),k=a,m=u["".concat(d,".").concat(k)]||u[k]||c[k]||r;return t?o.createElement(m,s(s({ref:n},p),{},{components:t})):o.createElement(m,s({ref:n},p))}));function k(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,s=new Array(r);s[0]=u;var i={};for(var d in n)hasOwnProperty.call(n,d)&&(i[d]=n[d]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var l=2;l<r;l++)s[l]=t[l];return o.createElement.apply(null,s)}return o.createElement.apply(null,t)}u.displayName="MDXCreateElement"},2824:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>c,frontMatter:()=>r,metadata:()=>i,toc:()=>l});var o=t(7462),a=(t(7294),t(3905));const r={sidebar_position:2,sidebar_label:"Disk Storage Node"},s="Disk Storage Node",i={unversionedId:"volumes_and_nodes/node_expansion/disk_nodes",id:"volumes_and_nodes/node_expansion/disk_nodes",title:"Disk Storage Node",description:"Raw disk storage nodes provide applications with raw disk data volumes and",source:"@site/docs/volumes_and_nodes/node_expansion/disk_nodes.md",sourceDirName:"volumes_and_nodes/node_expansion",slug:"/volumes_and_nodes/node_expansion/disk_nodes",permalink:"/docs/volumes_and_nodes/node_expansion/disk_nodes",draft:!1,editUrl:"https://github.com/hwameistor/hwameistor/edit/main/docs/docs/volumes_and_nodes/node_expansion/disk_nodes.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,sidebar_label:"Disk Storage Node"},sidebar:"tutorialSidebar",previous:{title:"LVM Storage Node",permalink:"/docs/volumes_and_nodes/node_expansion/lvm_nodes"},next:{title:"Applications",permalink:"/docs/category/applications"}},d={},l=[{value:"Steps",id:"steps",level:2},{value:"1. Prepare a disk storage node",id:"1-prepare-a-disk-storage-node",level:3},{value:"2. Add the storage node into HwameiStor",id:"2-add-the-storage-node-into-hwameistor",level:3},{value:"3. Post check",id:"3-post-check",level:3}],p={toc:l};function c(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,o.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"disk-storage-node"},"Disk Storage Node"),(0,a.kt)("p",null,"Raw disk storage nodes provide applications with raw disk data volumes and\nmaintain the mapping between raw disks and raw disk data volumes on the storage node."),(0,a.kt)("h2",{id:"steps"},"Steps"),(0,a.kt)("h3",{id:"1-prepare-a-disk-storage-node"},"1. Prepare a disk storage node"),(0,a.kt)("p",null,"Add the node to the Kubernetes cluster or select a Kubernetes node."),(0,a.kt)("p",null,"For example, suppose you have a new node with the following information:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"name: k8s-worker-2"),(0,a.kt)("li",{parentName:"ul"},"devPath: /dev/sdb"),(0,a.kt)("li",{parentName:"ul"},"diskType: SSD disk")),(0,a.kt)("p",null,"After the new node is already added into the Kubernetes cluster,\nmake sure the following HwameiStor pods are already running on this node."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"$ kubectl get node\nNAME           STATUS   ROLES            AGE     VERSION\nk8s-master-1   Ready    master           96d     v1.24.3-2+63243a96d1c393\nk8s-worker-1   Ready    worker           96h     v1.24.3-2+63243a96d1c393\nk8s-worker-2   Ready    worker           96h     v1.24.3-2+63243a96d1c393\n\n$ kubectl -n hwameistor get pod -o wide | grep k8s-worker-2\nhwameistor-local-disk-manager-sfsf1     2/2     Running   0     19h   10.6.128.150      k8s-worker-2   <none>  <none>\n\n# check LocalDiskNode resource\n$ kubectl get localdisknode k8s-worker-2\nNAME           FREECAPACITY   TOTALCAPACITY   TOTALDISK   STATUS   AGE\nk8s-worker-2                                              Ready    21d\n")),(0,a.kt)("h3",{id:"2-add-the-storage-node-into-hwameistor"},"2. Add the storage node into HwameiStor"),(0,a.kt)("p",null,"Create the storage pool of the node by adding a LocalStorageClaim CR as below:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},"$ kubectl apply -f - <<EOF\napiVersion: hwameistor.io/v1alpha1\nkind: LocalDiskClaim\nmetadata:\n  name: k8s-worker-2\nspec:\n  nodeName: k8s-worker-2\n  owner: local-disk-manager\n  description:\n    diskType: SSD\nEOF\n")),(0,a.kt)("h3",{id:"3-post-check"},"3. Post check"),(0,a.kt)("p",null,"Finally, check if the node has created the storage pool by checking the LocalDiskNode CR."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl get localstoragenode k8s-worker-2 -o yaml\n")),(0,a.kt)("p",null,"The output may look like:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: hwameistor.io/v1alpha1\nkind: LocalDiskNode\nmetadata:\n  name: k8s-worker-2\nspec:\n  nodeName: k8s-worker-2\nstatus:\n  pools:\n    LocalDisk_PoolSSD:\n      class: SSD\n      disks:\n        - capacityBytes: 214744170496\n          devPath: /dev/sdb\n          state: Available\n          type: SSD\n      freeCapacityBytes: 214744170496\n      freeVolumeCount: 1\n      totalCapacityBytes: 214744170496\n      totalVolumeCount: 1\n      type: REGULAR\n      usedCapacityBytes: 0\n      usedVolumeCount: 0\n      volumeCapacityBytesLimit: 214744170496\n      volumes:\n  state: Ready\n")))}c.isMDXComponent=!0}}]);