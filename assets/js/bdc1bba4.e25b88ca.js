"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8051],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>p});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),m=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=m(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),c=m(n),p=o,v=c["".concat(l,".").concat(p)]||c[p]||u[p]||r;return n?a.createElement(v,s(s({ref:t},d),{},{components:n})):a.createElement(v,s({ref:t},d))}));function p(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,s=new Array(r);s[0]=c;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:o,s[1]=i;for(var m=2;m<r;m++)s[m]=n[m];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},9762:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>r,metadata:()=>i,toc:()=>m});var a=n(7462),o=(n(7294),n(3905));const r={sidebar_position:2,sidebar_label:"Disk Volume"},s="Disk Volume",i={unversionedId:"volumes_and_nodes/create_hwameistor_volumes/disk_volumes",id:"volumes_and_nodes/create_hwameistor_volumes/disk_volumes",title:"Disk Volume",description:"HwameiStor provides another type of data volume known as raw disk data volume.",source:"@site/docs/volumes_and_nodes/create_hwameistor_volumes/disk_volumes.md",sourceDirName:"volumes_and_nodes/create_hwameistor_volumes",slug:"/volumes_and_nodes/create_hwameistor_volumes/disk_volumes",permalink:"/docs/volumes_and_nodes/create_hwameistor_volumes/disk_volumes",draft:!1,editUrl:"https://github.com/hwameistor/hwameistor/edit/main/docs/docs/volumes_and_nodes/create_hwameistor_volumes/disk_volumes.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,sidebar_label:"Disk Volume"},sidebar:"tutorialSidebar",previous:{title:"LVM Volume",permalink:"/docs/volumes_and_nodes/create_hwameistor_volumes/lvm_volumes"},next:{title:"Node Expansion",permalink:"/docs/category/node-expansion"}},l={},m=[{value:"Steps",id:"steps",level:2},{value:"1. Prepare Disk Storage Node",id:"1-prepare-disk-storage-node",level:3},{value:"2. Prepare StorageClass",id:"2-prepare-storageclass",level:3},{value:"3. Create Volume",id:"3-create-volume",level:3},{value:"4. Use Volume",id:"4-use-volume",level:3}],d={toc:m};function u(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"disk-volume"},"Disk Volume"),(0,o.kt)("p",null,"HwameiStor provides another type of data volume known as raw disk data volume.\nThis volume is based on the raw disk present on the node and can be directly mounted for container use.\nAs a result, this type of data volume offers more efficient data read and write performance,\nthereby fully unleashing the performance of the disk."),(0,o.kt)("h2",{id:"steps"},"Steps"),(0,o.kt)("h3",{id:"1-prepare-disk-storage-node"},"1. Prepare Disk Storage Node"),(0,o.kt)("p",null,"Ensure that the storage node has sufficient available capacity. If there is not enough capacity,\nplease refer to ",(0,o.kt)("a",{parentName:"p",href:"/docs/volumes_and_nodes/node_expansion/disk_nodes"},"Expanding LVM Storage Nodes"),"."),(0,o.kt)("p",null,"Check for available capacity using the following command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"$ kubectl get localdisknodes\nNAME           FREECAPACITY   TOTALCAPACITY   TOTALDISK   STATUS   AGE\nk8s-worker-2   1073741824     1073741824      1           Ready    19d\n")),(0,o.kt)("h3",{id:"2-prepare-storageclass"},"2. Prepare StorageClass"),(0,o.kt)("p",null,"Create a StorageClass named ",(0,o.kt)("inlineCode",{parentName:"p"},"hwameistor-storage-disk-ssd")," using the following command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},"$ cat << EOF | kubectl apply -f - \napiVersion: storage.k8s.io/v1\nkind: StorageClass\nmetadata:  \n  name: hwameistor-storage-disk-ssd\nparameters:\n  diskType: SSD\nprovisioner: disk.hwameistor.io\nallowVolumeExpansion: false\nreclaimPolicy: Delete\nvolumeBindingMode: WaitForFirstConsumer\nEOF \n")),(0,o.kt)("h3",{id:"3-create-volume"},"3. Create Volume"),(0,o.kt)("p",null,"Create a PVC named ",(0,o.kt)("inlineCode",{parentName:"p"},"hwameistor-disk-volume")," using the following command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},"$ cat << EOF | kubectl apply -f -\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: hwameistor-disk-volume\nspec:\n  accessModes:\n  - ReadWriteOnce\n  resources:\n    requests:\n      storage: 1Gi\n  storageClassName: hwameistor-storage-disk-ssd\nEOF\n")),(0,o.kt)("h3",{id:"4-use-volume"},"4. Use Volume"),(0,o.kt)("p",null,"Create a nginx application and use ",(0,o.kt)("inlineCode",{parentName:"p"},"hwameistor-disk-volume")," volume using the following command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},"$ cat << EOF | kubectl apply -f -\napiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx\n  namespace: default\nspec:\n  containers:\n  - name: nginx\n    image: docker.io/library/nginx:latest\n    imagePullPolicy: IfNotPresent\n    volumeMounts:\n    - name: data\n      mountPath: /data\n    ports:\n    - containerPort: 80\n  volumes:\n  - name: data\n    persistentVolumeClaim:\n      claimName: hwameistor-disk-volume\nEOF\n")))}u.isMDXComponent=!0}}]);