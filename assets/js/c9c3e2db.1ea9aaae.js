"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5736],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>d});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},s=Object.keys(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=n.createContext({}),u=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},c=function(e){var t=u(e.components);return n.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,s=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),m=u(r),d=o,f=m["".concat(l,".").concat(d)]||m[d]||p[d]||s;return r?n.createElement(f,a(a({ref:t},c),{},{components:r})):n.createElement(f,a({ref:t},c))}));function d(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=r.length,a=new Array(s);a[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:o,a[1]=i;for(var u=2;u<s;u++)a[u]=r[u];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},5599:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>s,metadata:()=>i,toc:()=>u});var n=r(7462),o=(r(7294),r(3905));const s={sidebar_position:5,sidebar_label:"Volume"},a="Volume",i={unversionedId:"terms/volume",id:"terms/volume",title:"Volume",description:"On-disk files in a container are ephemeral, which presents some problems for non-trivial",source:"@site/docs/terms/volume.md",sourceDirName:"terms",slug:"/terms/volume",permalink:"/docs/terms/volume",draft:!1,editUrl:"https://github.com/hwameistor/hwameistor/docs/terms/volume.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5,sidebar_label:"Volume"},sidebar:"tutorialSidebar",previous:{title:"CRD and CR",permalink:"/docs/terms/crd_and_cr"},next:{title:"LVM",permalink:"/docs/terms/lvm"}},l={},u=[],c={toc:u};function p(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"volume"},"Volume"),(0,o.kt)("p",null,"On-disk files in a container are ephemeral, which presents some problems for non-trivial\napplications when running in containers."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"One problem is the loss of files when a container crashes.\nThe kubelet restarts the container but with a clean state."),(0,o.kt)("li",{parentName:"ul"},"A second problem occurs when sharing files between containers running together in a ",(0,o.kt)("inlineCode",{parentName:"li"},"Pod"),".")),(0,o.kt)("p",null,"The Kubernetes volume abstraction solves both of these problems."),(0,o.kt)("p",null,"Kubernetes supports many types of volumes. A Pod can use any number of volume types simultaneously.\nEphemeral volume types have a lifetime of a pod, but persistent volumes exist beyond the lifetime\nof a pod. When a pod ceases to exist, Kubernetes destroys ephemeral volumes; however, Kubernetes\ndoes not destroy persistent volumes. For any kind of volume in a given pod, data is preserved\nacross container restarts."),(0,o.kt)("p",null,"At its core, a volume is a directory, possibly with some data in it, which is accessible to the\ncontainers in a pod. How that directory comes to be, the medium that backs it, and the contents\nof it are determined by the particular volume type used."),(0,o.kt)("p",null,"To use a volume, specify the volumes to provide for the Pod in ",(0,o.kt)("inlineCode",{parentName:"p"},".spec.volumes")," and declare where\nto mount those volumes into containers in ",(0,o.kt)("inlineCode",{parentName:"p"},".spec.containers[*].volumeMounts"),"."),(0,o.kt)("p",null,"See also the official documentation provided by Kubernetes:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://kubernetes.io/docs/concepts/storage/volumes/"},"Volume")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://kubernetes.io/docs/concepts/storage/persistent-volumes/"},"Persistent Volume")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://kubernetes.io/docs/concepts/storage/ephemeral-volumes/"},"Ephemeral Volume"))))}p.isMDXComponent=!0}}]);