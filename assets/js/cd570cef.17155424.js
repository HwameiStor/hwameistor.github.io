"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[619],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>d});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),c=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},u=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=c(a),d=r,g=p["".concat(s,".").concat(d)]||p[d]||m[d]||o;return a?n.createElement(g,l(l({ref:t},u),{},{components:a})):n.createElement(g,l({ref:t},u))}));function d(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,l=new Array(o);l[0]=p;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var c=2;c<o;c++)l[c]=a[c];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}p.displayName="MDXCreateElement"},2059:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var n=a(7462),r=(a(7294),a(3905));const o={sidebar_position:2,sidebar_label:"Migrate Volumes"},l="Migrate Volumes",i={unversionedId:"quick_start/create_stateful/advanced/migrate",id:"quick_start/create_stateful/advanced/migrate",title:"Migrate Volumes",description:"Volume Migration is an important operation and maintenance management function of HwameiStor.",source:"@site/docs/quick_start/create_stateful/advanced/migrate.md",sourceDirName:"quick_start/create_stateful/advanced",slug:"/quick_start/create_stateful/advanced/migrate",permalink:"/docs/quick_start/create_stateful/advanced/migrate",draft:!1,editUrl:"https://github.com/hwameistor/hwameistor/edit/main/docs/docs/quick_start/create_stateful/advanced/migrate.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,sidebar_label:"Migrate Volumes"},sidebar:"tutorialSidebar",previous:{title:"Expand Volumes",permalink:"/docs/quick_start/create_stateful/advanced/expand"},next:{title:"Advanced Features",permalink:"/docs/category/advanced-features"}},s={},c=[{value:"Basic concepts",id:"basic-concepts",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Step 1: Create convertible <code>StorageClass</code>",id:"step-1-create-convertible-storageclass",level:2},{value:"Step 2: Create multiple <code>PVCs</code>",id:"step-2-create-multiple-pvcs",level:2},{value:"Step 3: Deploy multi-volume pod",id:"step-3-deploy-multi-volume-pod",level:2},{value:"Step 4: Detach multi-volume pod",id:"step-4-detach-multi-volume-pod",level:2},{value:"Step 5: Create migration tasks",id:"step-5-create-migration-tasks",level:2},{value:"Step 6: Check migration Status",id:"step-6-check-migration-status",level:2},{value:"Step 7: Verify migration results",id:"step-7-verify-migration-results",level:2},{value:"Step 8: Reattach/Remount volume",id:"step-8-reattachremount-volume",level:2}],u={toc:c};function m(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"migrate-volumes"},"Migrate Volumes"),(0,r.kt)("p",null,"Volume Migration is an important operation and maintenance management function of HwameiStor.\nApplication-mounted data volumes can be unmounted and migrated from a node with errors or an\nalert indicating an impending errors to a healthy node. After the data volume is successfully\nmigrated, the Pods of related applications are also rescheduled to the new node and the new data\nvolume is bound and mounted."),(0,r.kt)("h2",{id:"basic-concepts"},"Basic concepts"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"LocalVolumeGroup(LVG)")," management is an important function in HwameiStor. When\nan application Pod applies for multiple data volume PVCs, in order to ensure the\ncorrect operation of the Pod, these data volumes must have certain attributes,\nsuch as the number of copies of the data volume and the node where the copies are\nlocated. Properly managing these associated data volumes through the data volume\ngroup management function is a very important capability in HwameiStor."),(0,r.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"LocalVolumeMigrate")," needs to be deployed in the Kubernetes system, and the\ndeployed application needs to meet the following conditions:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Support ",(0,r.kt)("inlineCode",{parentName:"li"},"lvm")," type volumes",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"When migrating based on ",(0,r.kt)("inlineCode",{parentName:"li"},"LocalVolume")," granularity, the data volumes belonging\nto the same ",(0,r.kt)("inlineCode",{parentName:"li"},"LocalVolumeGroup")," by default will not be migrated together\n(if they are migrated together, you need to configure the switch ",(0,r.kt)("inlineCode",{parentName:"li"},"MigrateAllVols: true"),")")))),(0,r.kt)("h2",{id:"step-1-create-convertible-storageclass"},"Step 1: Create convertible ",(0,r.kt)("inlineCode",{parentName:"h2"},"StorageClass")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"$ cd ../../deploy/\n$ kubectl apply -f storageclass-convertible-lvm.yaml\n")),(0,r.kt)("h2",{id:"step-2-create-multiple-pvcs"},"Step 2: Create multiple ",(0,r.kt)("inlineCode",{parentName:"h2"},"PVCs")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"$ kubectl apply -f pvc-multiple-lvm.yaml\n")),(0,r.kt)("h2",{id:"step-3-deploy-multi-volume-pod"},"Step 3: Deploy multi-volume pod"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"$ kubectl apply -f nginx-multiple-lvm.yaml\n")),(0,r.kt)("h2",{id:"step-4-detach-multi-volume-pod"},"Step 4: Detach multi-volume pod"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"$ kubectl -n hwameistor scale --current-replicas=1 --replicas=0 deployment/nginx-local-storage-lvm\n")),(0,r.kt)("h2",{id:"step-5-create-migration-tasks"},"Step 5: Create migration tasks"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"$ cat << EOF | kubectl apply -f -\napiVersion: hwameistor.io/v1alpha1\nkind: LocalVolumeMigrate\nmetadata:\n  namespace: hwameistor\n  name: <localVolumeMigrateName>\nspec:\n  sourceNode: <sourceNodeName>\n  targetNodesSuggested: \n  - <targetNodesName1>\n  - <targetNodesName2>\n  volumeName: <volName>\n  migrateAllVols: <true/false>\nEOF\n")),(0,r.kt)("p",null,"Attentions:"),(0,r.kt)("p",null,"1) HwameiStor will select a target node from targetNodesSuggested to migrate. If all the candidates don't have enough storage space, the migrate will fail."),(0,r.kt)("p",null,"2) If targetNodesSuggested is emtpy or not set, HwameiStore will automatically select a propriate node for the migrate. If there is no valid candidate, the migrate will fail."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"$ cat << EOF | kubectl apply -f -\napiVersion: hwameistor.io/v1alpha1\nkind: LocalVolumeMigrate\nmetadata:\n  namespace: hwameistor\n  name: <localVolumeMigrateName>\nspec:\n  sourceNode: <sourceNodeName>\n  targetNodesSuggested: []\n  volumeName: <volName>\n  migrateAllVols: <true/false>\nEOF\n")),(0,r.kt)("h2",{id:"step-6-check-migration-status"},"Step 6: Check migration Status"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},'$ kubectl get LocalVolumeMigrate localvolumemigrate-1 -o yaml\napiVersion: hwameistor.io/v1alpha1\nkind: LocalVolumeMigrate\nmetadata:\n  generation: 1\n  name: localvolumemigrate-1\n  namespace: hwameistor\n  resourceVersion: "12828637"\n  uid: 78af7f1b-d701-4b03-84de-27fafca58764\nspec:\n  abort: false\n  migrateAllVols: true\n  sourceNode: k8s-172-30-40-61\n  targetNodesSuggested:\n  - k8s-172-30-45-223\n  volumeName: pvc-1a0913ac-32b9-46fe-8258-39b4e3b696a4\nstatus:\n  originalReplicaNumber: 1\n  targetNode: k8s-172-30-45-223\n  state: Completed\n  message: \n')),(0,r.kt)("h2",{id:"step-7-verify-migration-results"},"Step 7: Verify migration results"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"$ kubectl get lvr\nNAME                                              CAPACITY     NODE                STATE   SYNCED   DEVICE                                                                  AGE\npvc-1a0913ac-32b9-46fe-8258-39b4e3b696a4-9cdkkn   1073741824   k8s-172-30-45-223   Ready   true     /dev/LocalStorage_PoolHDD-HA/pvc-1a0913ac-32b9-46fe-8258-39b4e3b696a4   77s\npvc-d9d3ae9f-64af-44de-baad-4c69b9e0744a-7ppmrx   1073741824   k8s-172-30-45-223   Ready   true     /dev/LocalStorage_PoolHDD-HA/pvc-d9d3ae9f-64af-44de-baad-4c69b9e0744a   77s\n")),(0,r.kt)("h2",{id:"step-8-reattachremount-volume"},"Step 8: Reattach/Remount volume"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"$ kubectl -n hwameistor scale --current-replicas=0 --replicas=1 deployment/nginx-local-storage-lvm\n")))}m.isMDXComponent=!0}}]);