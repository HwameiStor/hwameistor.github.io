"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9806],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>d});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},o=Object.keys(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var i=r.createContext({}),m=function(e){var t=r.useContext(i),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},p=function(e){var t=m(e.components);return r.createElement(i.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,i=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=m(a),d=n,f=u["".concat(i,".").concat(d)]||u[d]||c[d]||o;return a?r.createElement(f,s(s({ref:t},p),{},{components:a})):r.createElement(f,s({ref:t},p))}));function d(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,s=new Array(o);s[0]=u;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:n,s[1]=l;for(var m=2;m<o;m++)s[m]=a[m];return r.createElement.apply(null,s)}return r.createElement.apply(null,a)}u.displayName="MDXCreateElement"},7466:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>m});var r=a(7462),n=(a(7294),a(3905));const o={sidebar_position:1,sidebar_label:"LVM Volume"},s="LVM Volume",l={unversionedId:"storageclass/lvm_volumes",id:"storageclass/lvm_volumes",title:"LVM Volume",description:"HwameiStor provides LVM-based data volumes,",source:"@site/docs/storageclass/lvm_volumes.md",sourceDirName:"storageclass",slug:"/storageclass/lvm_volumes",permalink:"/docs/storageclass/lvm_volumes",draft:!1,editUrl:"https://github.com/hwameistor/hwameistor/edit/main/docs/docs/storageclass/lvm_volumes.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,sidebar_label:"LVM Volume"},sidebar:"tutorialSidebar",previous:{title:"StorageClass",permalink:"/docs/category/storageclass"},next:{title:"Disk Volume",permalink:"/docs/storageclass/disk_volumes"}},i={},m=[],p={toc:m};function c(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,r.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"lvm-volume"},"LVM Volume"),(0,n.kt)("p",null,"HwameiStor provides LVM-based data volumes,\nwhich offer read and write performance comparable to that of native disks.\nThese data volumes also provide advanced features such as data volume expansion, migration, high availability, and more."),(0,n.kt)("p",null,"The following steps demonstrate how to create a simple non-HA type data volume."),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Prepare LVM Storage Node"),(0,n.kt)("p",{parentName:"li"},"Ensure that the storage node has sufficient available capacity. If there is not enough capacity,\nplease refer to ",(0,n.kt)("a",{parentName:"p",href:"/docs/nodes_and_disks/lvm_nodes"},"Expanding LVM Storage Nodes"),"."),(0,n.kt)("p",{parentName:"li"},"Check for available capacity using the following command:"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-console"},"$ kubectl get localstoragenodes k8s-worker-2 -oyaml | grep freeCapacityBytes\nfreeCapacityBytes: 10523508736\n"))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Prepare StorageClass"),(0,n.kt)("p",{parentName:"li"},"Create a StorageClass named ",(0,n.kt)("inlineCode",{parentName:"p"},"hwameistor-storage-lvm-ssd")," using the following command:"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-console"},'$ cat << EOF | kubectl apply -f - \napiVersion: storage.k8s.io/v1\nkind: StorageClass\nmetadata:  \n  name: hwameistor-storage-lvm-ssd \nparameters:\n  convertible: "false"\n  csi.storage.k8s.io/fstype: xfs\n  poolClass: SSD\n  poolType: REGULAR\n  replicaNumber: "1"\n  striped: "true"\n  volumeKind: LVM\nprovisioner: lvm.hwameistor.io\nreclaimPolicy: Delete\nvolumeBindingMode: WaitForFirstConsumer\nallowVolumeExpansion: true\nEOF \n'))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Create Volume"),(0,n.kt)("p",{parentName:"li"},"Create a PVC named ",(0,n.kt)("inlineCode",{parentName:"p"},"hwameistor-lvm-volume")," using the following command:"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-console"},"$ cat << EOF | kubectl apply -f -\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: hwameistor-lvm-volume\nspec:\n  accessModes:\n  - ReadWriteOnce\n  resources:\n    requests:\n      storage: 1Gi\n  storageClassName: hwameistor-storage-lvm-ssd\nEOF\n")))))}c.isMDXComponent=!0}}]);