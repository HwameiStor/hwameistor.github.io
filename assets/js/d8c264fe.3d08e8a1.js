"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7805],{3905:(e,r,t)=>{t.d(r,{Zo:()=>k,kt:()=>u});var o=t(7294);function n(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function a(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function s(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?a(Object(t),!0).forEach((function(r){n(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function l(e,r){if(null==e)return{};var t,o,n=function(e,r){if(null==e)return{};var t,o,n={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],r.indexOf(t)>=0||(n[t]=e[t]);return n}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var i=o.createContext({}),c=function(e){var r=o.useContext(i),t=r;return e&&(t="function"==typeof e?e(r):s(s({},r),e)),t},k=function(e){var r=c(e.components);return o.createElement(i.Provider,{value:r},e.children)},p={inlineCode:"code",wrapper:function(e){var r=e.children;return o.createElement(o.Fragment,{},r)}},d=o.forwardRef((function(e,r){var t=e.components,n=e.mdxType,a=e.originalType,i=e.parentName,k=l(e,["components","mdxType","originalType","parentName"]),d=c(t),u=n,m=d["".concat(i,".").concat(u)]||d[u]||p[u]||a;return t?o.createElement(m,s(s({ref:r},k),{},{components:t})):o.createElement(m,s({ref:r},k))}));function u(e,r){var t=arguments,n=r&&r.mdxType;if("string"==typeof e||n){var a=t.length,s=new Array(a);s[0]=d;var l={};for(var i in r)hasOwnProperty.call(r,i)&&(l[i]=r[i]);l.originalType=e,l.mdxType="string"==typeof e?e:n,s[1]=l;for(var c=2;c<a;c++)s[c]=t[c];return o.createElement.apply(null,s)}return o.createElement.apply(null,t)}d.displayName="MDXCreateElement"},309:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>i,contentTitle:()=>s,default:()=>p,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var o=t(7462),n=(t(7294),t(3905));const a={sidebar_position:4,sidebar_label:"Configure Storage Pool"},s="Configure Storage Pool",l={unversionedId:"installation/config-pool",id:"installation/config-pool",title:"Configure Storage Pool",description:"Step 1: Create LocalDiskClaim objects",source:"@site/docs/01.installation/03.config-pool.md",sourceDirName:"01.installation",slug:"/installation/config-pool",permalink:"/docs/installation/config-pool",draft:!1,editUrl:"https://github.com/hwameistor/hwameistor/docs/01.installation/03.config-pool.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,sidebar_label:"Configure Storage Pool"},sidebar:"tutorialSidebar",previous:{title:"Post-Deployment Inspect",permalink:"/docs/installation/post-deploy"},next:{title:"Upgrade",permalink:"/docs/installation/upgrade"}},i={},c=[{value:"Step 1: Create LocalDiskClaim objects",id:"step-1-create-localdiskclaim-objects",level:2},{value:"Step 2: Verify LocalDiskClaim objects",id:"step-2-verify-localdiskclaim-objects",level:2},{value:"Step 3: Verify StorageClass",id:"step-3-verify-storageclass",level:2},{value:"Step 4: Verify LocalDisk objects",id:"step-4-verify-localdisk-objects",level:2},{value:"Step 5 (Optional): Observe VG",id:"step-5-optional-observe-vg",level:2},{value:"Set up storage pool during deployment",id:"set-up-storage-pool-during-deployment",level:2}],k={toc:c};function p(e){let{components:r,...t}=e;return(0,n.kt)("wrapper",(0,o.Z)({},k,t,{components:r,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"configure-storage-pool"},"Configure Storage Pool"),(0,n.kt)("h2",{id:"step-1-create-localdiskclaim-objects"},"Step 1: Create LocalDiskClaim objects"),(0,n.kt)("p",null,"HwameiStor sets up storage pools by creating ",(0,n.kt)("inlineCode",{parentName:"p"},"LocalDiskClaim")," objects according to the storage media types. To create an HDD pool on all kubernetes worker nodes:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"$ helm template helm/hwameistor \\\n        -s templates/post-install-claim-disks.yaml \\\n        --set storageNodes='{k8s-worker-1,k8s-worker-2,k8s-worker-3}' \\\n        | kubectl apply -f -\n")),(0,n.kt)("h2",{id:"step-2-verify-localdiskclaim-objects"},"Step 2: Verify LocalDiskClaim objects"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"$ kubectl get ldc\nNAME           NODEMATCH      PHASE\nk8s-worker-1   k8s-worker-1   Bound\nk8s-worker-2   k8s-worker-2   Bound\nk8s-worker-3   k8s-worker-3   Bound\n")),(0,n.kt)("h2",{id:"step-3-verify-storageclass"},"Step 3: Verify StorageClass"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"$  kubectl get sc hwameistor-storage-lvm-hdd\nNAME                         PROVISIONER         RECLAIMPOLICY   VOLUMEBINDINGMODE      ALLOWVOLUMEEXPANSION   AGE\nhwameistor-storage-lvm-hdd   lvm.hwameistor.io   Delete          WaitForFirstConsumer   true                   114s\n")),(0,n.kt)("h2",{id:"step-4-verify-localdisk-objects"},"Step 4: Verify LocalDisk objects"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"$ kubectl get ld\nNAME               NODEMATCH      CLAIM          PHASE\nk8s-worker-1-sda   k8s-worker-1                  Inuse\nk8s-worker-1-sdb   k8s-worker-1   k8s-worker-1   Claimed\nk8s-worker-1-sdc   k8s-worker-1   k8s-worker-1   Claimed\nk8s-worker-1-sdd   k8s-worker-1                  Inuse\nk8s-worker-1-sde   k8s-worker-1                  Inuse\nk8s-worker-2-sda   k8s-worker-2                  Inuse\nk8s-worker-2-sdb   k8s-worker-2   k8s-worker-2   Claimed\nk8s-worker-2-sdc   k8s-worker-2   k8s-worker-2   Claimed\nk8s-worker-2-sdd   k8s-worker-2                  Inuse\nk8s-worker-2-sde   k8s-worker-2                  Inuse\nk8s-worker-3-sda   k8s-worker-3                  Inuse\nk8s-worker-3-sdb   k8s-worker-3   k8s-worker-3   Claimed\nk8s-worker-3-sdc   k8s-worker-3   k8s-worker-3   Claimed\nk8s-worker-3-sdd   k8s-worker-3                  Inuse\nk8s-worker-3-sde   k8s-worker-3                  Inuse\n")),(0,n.kt)("h2",{id:"step-5-optional-observe-vg"},"Step 5 (Optional): Observe VG"),(0,n.kt)("p",null,"On a kubernetes worker node, observe a ",(0,n.kt)("inlineCode",{parentName:"p"},"VG")," is created for an ",(0,n.kt)("inlineCode",{parentName:"p"},"LocalDiskClaim")," object"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"root@k8s-worker-1:~$ vgdisplay LocalStorage_PoolHDD\n  --- Volume group ---\n  VG Name               LocalStorage_PoolHDD\n  System ID\n  Format                lvm2\n  Metadata Areas        2\n  Metadata Sequence No  1\n  VG Access             read/write\n  VG Status             resizable\n  MAX LV                0\n  Cur LV                0\n  Open LV               0\n  Max PV                0\n  Cur PV                2\n  Act PV                2\n  VG Size               199.99 GiB\n  PE Size               4.00 MiB\n  Total PE              51198\n  Alloc PE / Size       0 / 0\n  Free  PE / Size       51198 / 199.99 GiB\n  VG UUID               jJ3s7g-iyoJ-c4zr-3Avc-3K4K-BrJb-A5A5Oe\n")),(0,n.kt)("h2",{id:"set-up-storage-pool-during-deployment"},"Set up storage pool during deployment"),(0,n.kt)("p",null,"A storage pool can be configured during HwameiStor deployment by helm command:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"$ helm install \\\n    --namespace hwameistor \\\n    --create-namespace \\\n    hwameistor \\\n    helm/hwameistor \\\n    --set storageNodes='{k8s-worker-1,k8s-worker-2,k8s-worker-3}'\n")))}p.isMDXComponent=!0}}]);