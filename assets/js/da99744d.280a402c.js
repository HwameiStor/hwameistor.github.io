"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5160],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>p});var o=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function c(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,o)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?c(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):c(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,o,n=function(e,t){if(null==e)return{};var r,o,n={},c=Object.keys(e);for(o=0;o<c.length;o++)r=c[o],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(o=0;o<c.length;o++)r=c[o],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var a=o.createContext({}),s=function(e){var t=o.useContext(a),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=s(e.components);return o.createElement(a.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},h=o.forwardRef((function(e,t){var r=e.components,n=e.mdxType,c=e.originalType,a=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),h=s(r),p=n,m=h["".concat(a,".").concat(p)]||h[p]||d[p]||c;return r?o.createElement(m,i(i({ref:t},u),{},{components:r})):o.createElement(m,i({ref:t},u))}));function p(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var c=r.length,i=new Array(c);i[0]=h;var l={};for(var a in t)hasOwnProperty.call(t,a)&&(l[a]=t[a]);l.originalType=e,l.mdxType="string"==typeof e?e:n,i[1]=l;for(var s=2;s<c;s++)i[s]=r[s];return o.createElement.apply(null,i)}return o.createElement.apply(null,r)}h.displayName="MDXCreateElement"},9837:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>a,contentTitle:()=>i,default:()=>d,frontMatter:()=>c,metadata:()=>l,toc:()=>s});var o=r(7462),n=(r(7294),r(3905));const c={sidebar_position:3,sidebar_label:"Scheduler"},i="Scheduler",l={unversionedId:"architecture/modules/scheduler",id:"architecture/modules/scheduler",title:"Scheduler",description:"The Scheduler is used to automatically schedule the Pod to the correct node which is associated with the HwameiStor volume.",source:"@site/docs/architecture/modules/scheduler.md",sourceDirName:"architecture/modules",slug:"/architecture/modules/scheduler",permalink:"/docs/architecture/modules/scheduler",draft:!1,editUrl:"https://github.com/hwameistor/hwameistor/edit/main/docs/docs/architecture/modules/scheduler.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,sidebar_label:"Scheduler"},sidebar:"tutorialSidebar",previous:{title:"Local Storage",permalink:"/docs/architecture/modules/ls"},next:{title:"Admission Controller",permalink:"/docs/architecture/modules/admission_controller"}},a={},s=[],u={toc:s};function d(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,o.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"scheduler"},"Scheduler"),(0,n.kt)("p",null,"The Scheduler is used to automatically schedule the Pod to the correct node which is associated with the HwameiStor volume.\nWith the scheduler, the Pod does not need the NodeAffinity or NodeSelector field to select the node. A scheduler will work for both LVM and Disk volumes."),(0,n.kt)("p",null,"The Scheduler should be deployed with the HA mode in the cluster, which is a best practice for production."))}d.isMDXComponent=!0}}]);