"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6377],{3905:(e,t,r)=>{r.d(t,{Zo:()=>k,kt:()=>u});var o=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function n(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,o)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?n(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):n(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,o,a=function(e,t){if(null==e)return{};var r,o,a={},n=Object.keys(e);for(o=0;o<n.length;o++)r=n[o],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(o=0;o<n.length;o++)r=n[o],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var i=o.createContext({}),c=function(e){var t=o.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},k=function(e){var t=c(e.components);return o.createElement(i.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var r=e.components,a=e.mdxType,n=e.originalType,i=e.parentName,k=l(e,["components","mdxType","originalType","parentName"]),d=c(r),u=a,m=d["".concat(i,".").concat(u)]||d[u]||p[u]||n;return r?o.createElement(m,s(s({ref:t},k),{},{components:r})):o.createElement(m,s({ref:t},k))}));function u(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var n=r.length,s=new Array(n);s[0]=d;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:a,s[1]=l;for(var c=2;c<n;c++)s[c]=r[c];return o.createElement.apply(null,s)}return o.createElement.apply(null,r)}d.displayName="MDXCreateElement"},5324:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>p,frontMatter:()=>n,metadata:()=>l,toc:()=>c});var o=r(7462),a=(r(7294),r(3905));const n={sidebar_position:4,sidebar_label:"Set up a Storage Pool"},s="Set up a Storage Pool",l={unversionedId:"quick_start/install/storage_pool",id:"quick_start/install/storage_pool",title:"Set up a Storage Pool",description:"The example below is from a 4-node kubernetes cluster:",source:"@site/docs/quick_start/install/storage_pool.md",sourceDirName:"quick_start/install",slug:"/quick_start/install/storage_pool",permalink:"/docs/quick_start/install/storage_pool",draft:!1,editUrl:"https://github.com/hwameistor/hwameistor/docs/quick_start/install/storage_pool.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,sidebar_label:"Set up a Storage Pool"},sidebar:"tutorialSidebar",previous:{title:"Post-Check after Deployment",permalink:"/docs/quick_start/install/post_check"},next:{title:"Start a Stateful Application",permalink:"/docs/category/start-a-stateful-application"}},i={},c=[{value:"Steps",id:"steps",level:2},{value:"1. Create <code>LocalDiskClaim</code> objects",id:"1-create-localdiskclaim-objects",level:3},{value:"2. Verify <code>LocalDiskClaim</code> objects",id:"2-verify-localdiskclaim-objects",level:3},{value:"3. Verify <code>StorageClass</code>",id:"3-verify-storageclass",level:3},{value:"4. Verify <code>LocalDisk</code> objects",id:"4-verify-localdisk-objects",level:3},{value:"5. Observe VG (Optional)",id:"5-observe-vg-optional",level:3},{value:"Set up a storage pool during deployment",id:"set-up-a-storage-pool-during-deployment",level:2}],k={toc:c};function p(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,o.Z)({},k,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"set-up-a-storage-pool"},"Set up a Storage Pool"),(0,a.kt)("p",null,"The example below is from a 4-node kubernetes cluster:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},"$ kubectl get no\nNAME           STATUS   ROLES   AGE   VERSION\nk8s-master-1   Ready    master  82d   v1.24.3-2+63243a96d1c393\nk8s-worker-1   Ready    worker  36d   v1.24.3-2+63243a96d1c393\nk8s-worker-2   Ready    worker  59d   v1.24.3-2+63243a96d1c393\nk8s-worker-3   Ready    worker  36d   v1.24.3-2+63243a96d1c393\n")),(0,a.kt)("h2",{id:"steps"},"Steps"),(0,a.kt)("h3",{id:"1-create-localdiskclaim-objects"},"1. Create ",(0,a.kt)("inlineCode",{parentName:"h3"},"LocalDiskClaim")," objects"),(0,a.kt)("p",null,"HwameiStor sets up storage pools by creating ",(0,a.kt)("inlineCode",{parentName:"p"},"LocalDiskClaim")," objects according\nto the storage media types. To create an HDD pool, you need to specify ",(0,a.kt)("inlineCode",{parentName:"p"},"storageNodes"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},"$ helm template ./hwameistor \\\n   -s templates/post-install-claim-disks.yaml \\\n   --set storageNodes='{k8s-worker-1,k8s-worker-2,k8s-worker-3}' \\\n  | kubectl apply -f -\n")),(0,a.kt)("p",null,"or set all the worker nodes as ",(0,a.kt)("inlineCode",{parentName:"p"},"storageNodes"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},'$ sn="$( kubectl get no -l node-role.kubernetes.io/worker -o jsonpath="{.items[*].metadata.name}" | tr \' \' \',\' )"\n\n$ helm template ./hwameistor \\\n    -s templates/post-install-claim-disks.yaml \\\n    --set storageNodes="{$sn}" \\\n  | kubectl apply -f -\n')),(0,a.kt)("h3",{id:"2-verify-localdiskclaim-objects"},"2. Verify ",(0,a.kt)("inlineCode",{parentName:"h3"},"LocalDiskClaim")," objects"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},"$ kubectl get ldc\nNAME           NODEMATCH      PHASE\nk8s-worker-1   k8s-worker-1   Bound\nk8s-worker-2   k8s-worker-2   Bound\nk8s-worker-3   k8s-worker-3   Bound\n")),(0,a.kt)("h3",{id:"3-verify-storageclass"},"3. Verify ",(0,a.kt)("inlineCode",{parentName:"h3"},"StorageClass")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},"$  kubectl get sc hwameistor-storage-lvm-hdd\nNAME                         PROVISIONER         RECLAIMPOLICY   VOLUMEBINDINGMODE      ALLOWVOLUMEEXPANSION   AGE\nhwameistor-storage-lvm-hdd   lvm.hwameistor.io   Delete          WaitForFirstConsumer   true                   114s\n")),(0,a.kt)("h3",{id:"4-verify-localdisk-objects"},"4. Verify ",(0,a.kt)("inlineCode",{parentName:"h3"},"LocalDisk")," objects"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},"$ kubectl get ld\nNAME               NODEMATCH      CLAIM          PHASE\nk8s-worker-1-sda   k8s-worker-1                  Inuse\nk8s-worker-1-sdb   k8s-worker-1   k8s-worker-1   Claimed\nk8s-worker-1-sdc   k8s-worker-1   k8s-worker-1   Claimed\nk8s-worker-2-sda   k8s-worker-2                  Inuse\nk8s-worker-2-sdb   k8s-worker-2   k8s-worker-2   Claimed\nk8s-worker-2-sdc   k8s-worker-2   k8s-worker-2   Claimed\nk8s-worker-3-sda   k8s-worker-3                  Inuse\nk8s-worker-3-sdb   k8s-worker-3   k8s-worker-3   Claimed\nk8s-worker-3-sdc   k8s-worker-3   k8s-worker-3   Claimed\n")),(0,a.kt)("h3",{id:"5-observe-vg-optional"},"5. Observe VG (Optional)"),(0,a.kt)("p",null,"On a kubernetes worker node, check a ",(0,a.kt)("inlineCode",{parentName:"p"},"VG")," is created for an ",(0,a.kt)("inlineCode",{parentName:"p"},"LocalDiskClaim")," object."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},"root@k8s-worker-1:~$ vgdisplay LocalStorage_PoolHDD\n  --- Volume group ---\n  VG Name               LocalStorage_PoolHDD\n  System ID\n  Format                lvm2\n  Metadata Areas        2\n  Metadata Sequence No  1\n  VG Access             read/write\n  VG Status             resizable\n  MAX LV                0\n  Cur LV                0\n  Open LV               0\n  Max PV                0\n  Cur PV                2\n  Act PV                2\n  VG Size               199.99 GiB\n  PE Size               4.00 MiB\n  Total PE              51198\n  Alloc PE / Size       0 / 0\n  Free  PE / Size       51198 / 199.99 GiB\n  VG UUID               jJ3s7g-iyoJ-c4zr-3Avc-3K4K-BrJb-A5A5Oe\n")),(0,a.kt)("h2",{id:"set-up-a-storage-pool-during-deployment"},"Set up a storage pool during deployment"),(0,a.kt)("p",null,"A storage pool can be configured during HwameiStor deployment by setting the same\n",(0,a.kt)("inlineCode",{parentName:"p"},"storageNodes")," parameter as shown in the below example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},"$ helm install hwameistor ./hwameistor \\\n    -n hwameistor --create-namespace \\\n    --set storageNodes='{k8s-worker-1,k8s-worker-2,k8s-worker-3}'\n")))}p.isMDXComponent=!0}}]);