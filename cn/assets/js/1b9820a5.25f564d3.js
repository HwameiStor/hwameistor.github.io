"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7798],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>k});var o=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var d=o.createContext({}),l=function(e){var n=o.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},c=function(e){var n=l(e.components);return o.createElement(d.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},u=o.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,d=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=l(t),k=a,m=u["".concat(d,".").concat(k)]||u[k]||p[k]||r;return t?o.createElement(m,s(s({ref:n},c),{},{components:t})):o.createElement(m,s({ref:n},c))}));function k(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,s=new Array(r);s[0]=u;var i={};for(var d in n)hasOwnProperty.call(n,d)&&(i[d]=n[d]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var l=2;l<r;l++)s[l]=t[l];return o.createElement.apply(null,s)}return o.createElement.apply(null,t)}u.displayName="MDXCreateElement"},5200:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>p,frontMatter:()=>r,metadata:()=>i,toc:()=>l});var o=t(7462),a=(t(7294),t(3905));const r={sidebar_position:2,sidebar_label:"Node Expansion"},s="Node Expansion",i={unversionedId:"nodes_and_disks/node_expansion",id:"nodes_and_disks/node_expansion",title:"Node Expansion",description:"A storage system is usually expected to expand its capacity by adding a new storage node.",source:"@site/docs/nodes_and_disks/node_expansion.md",sourceDirName:"nodes_and_disks",slug:"/nodes_and_disks/node_expansion",permalink:"/cn/docs/nodes_and_disks/node_expansion",draft:!1,editUrl:"https://github.com/hwameistor/hwameistor/edit/main/docs/docs/nodes_and_disks/node_expansion.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,sidebar_label:"Node Expansion"},sidebar:"tutorialSidebar",previous:{title:"LVM Storage Node",permalink:"/cn/docs/nodes_and_disks/lvm_nodes"},next:{title:"Disk Storage Node",permalink:"/cn/docs/nodes_and_disks/disk_nodes"}},d={},l=[{value:"Prepare a new storage node",id:"prepare-a-new-storage-node",level:2},{value:"Add the storage node into HwameiStor",id:"add-the-storage-node-into-hwameistor",level:2},{value:"Post check",id:"post-check",level:2}],c={toc:l};function p(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,o.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"node-expansion"},"Node Expansion"),(0,a.kt)("p",null,"A storage system is usually expected to expand its capacity by adding a new storage node.\nIn HwameiStor, it can be done with the following steps."),(0,a.kt)("h2",{id:"prepare-a-new-storage-node"},"Prepare a new storage node"),(0,a.kt)("p",null,"Add the node into the Kubernetes cluster, or select a Kubernetes node.\nThe node should have all the required items described in ",(0,a.kt)("a",{parentName:"p",href:"/cn/docs/install/prereq"},"Prerequisites"),"."),(0,a.kt)("p",null,"For example, the new node and disk information are as follows:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"name: k8s-worker-4"),(0,a.kt)("li",{parentName:"ul"},"devPath: /dev/sdb"),(0,a.kt)("li",{parentName:"ul"},"diskType: SSD disk")),(0,a.kt)("p",null,"After the new node is already added into the Kubernetes cluster,\nmake sure the following HwameiStor pods are already running on this node."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},"$ kubectl get node\nNAME           STATUS   ROLES            AGE     VERSION\nk8s-master-1   Ready    master           96d     v1.24.3-2+63243a96d1c393\nk8s-worker-1   Ready    worker           96h     v1.24.3-2+63243a96d1c393\nk8s-worker-2   Ready    worker           96h     v1.24.3-2+63243a96d1c393\nk8s-worker-3   Ready    worker           96d     v1.24.3-2+63243a96d1c393\nk8s-worker-4   Ready    worker           1h      v1.24.3-2+63243a96d1c393\n\n$ kubectl -n hwameistor get pod -o wide | grep k8s-worker-4\nhwameistor-local-disk-manager-c86g5     2/2     Running   0     19h   10.6.182.105      k8s-worker-4   <none>  <none>\nhwameistor-local-storage-s4zbw          2/2     Running   0     19h   192.168.140.82    k8s-worker-4   <none>  <none>\n\n# check if LocalStorageNode exists\n$ kubectl get localstoragenode k8s-worker-4\nNAME                 IP           STATUS   AGE\nk8s-worker-4   10.6.182.103       Ready    8d\n")),(0,a.kt)("h2",{id:"add-the-storage-node-into-hwameistor"},"Add the storage node into HwameiStor"),(0,a.kt)("p",null,"Construct the storage pool of the node by adding a LocalStorageClaim CR as below:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},"$ kubectl apply -f - <<EOF\napiVersion: hwameistor.io/v1alpha1\nkind: LocalDiskClaim\nmetadata:\n  name: k8s-worker-4\nspec:\n  nodeName: k8s-worker-4\n  owner: local-storage\n  description:\n    diskType: SSD\nEOF\n")),(0,a.kt)("h2",{id:"post-check"},"Post check"),(0,a.kt)("p",null,"Finally, check if the node has constructed the storage pool by checking the LocalStorageNode CR."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl get localstoragenode k8s-worker-4 -o yaml\n")),(0,a.kt)("p",null,"The output may look like:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: hwameistor.io/v1alpha1\nkind: LocalStorageNode\nmetadata:\n  name: k8s-worker-4\nspec:\n  hostname: k8s-worker-4\n  storageIP: 10.6.182.103\n  topogoly:\n    region: default\n    zone: default\nstatus:\n  pools:\n    LocalStorage_PoolSSD:\n      class: SSD\n      disks:\n      - capacityBytes: 214744170496\n        devPath: /dev/sdb\n        state: InUse\n        type: SSD\n      freeCapacityBytes: 214744170496\n      freeVolumeCount: 1000\n      name: LocalStorage_PoolSSD\n      totalCapacityBytes: 214744170496\n      totalVolumeCount: 1000\n      type: REGULAR\n      usedCapacityBytes: 0\n      usedVolumeCount: 0\n      volumeCapacityBytesLimit: 214744170496\n      volumes:\n  state: Ready\n")))}p.isMDXComponent=!0}}]);